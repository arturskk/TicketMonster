<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE bookinfo PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "guide.ent">
%BOOK_ENTITIES;
]>

<chapter>
    <title>Introduction</title>

    <para>The Ticket Monster application provides a real world-inspired
    example of integrating Spring with the JBoss Entprise Platforms. It is a
    web application, which illustrates several use cases through various
    combinations of components and technologies. It also illustrates how to
    use the Snowdrop libraries to provide JBoss-specific features, such as
    creating a standalone deployment of an
    <classname>ApplicationContext</classname> and using many Spring-provided
    features like security and caching.</para>

    <para>This book aims to illustrate the mechanics of using Spring with
    different Java EE 6 components in the specific context of the JBoss
    Enterprise Platforms, and to recommend methods of achieving certain
    integration goals.</para>

    <para>The Ticket Monster example is not intended as a guide to creating a
    domain model. Detailing the various layers of application and UI design is
    outside the scope of this document. As such, the example application has
    been designed to illustrate integration use cases, rather than to
    demonstrate a domain model that strictly follows principles of
    object-oriented and domain-driven design.</para>

    <section>
      <title>Prerequisites</title>

      <para>Deployment of the Ticket Monster application requires the
      following:</para>

      <itemizedlist>
        <listitem>
          <para>Java 6 JDK</para>
        </listitem>

        <listitem>
          <para>JBoss Application Server 7.0.2.Final or later</para>
        </listitem>

        <listitem>
          <para>Maven 2.0.9 or later, with appropriate repositories</para>
        </listitem>
      </itemizedlist>

      <simplesect>
        <title>Setting Up Maven Repositories</title>

        <para>The Maven project setup does not make any assumptions where the
        artifacts used in the project are coming from (which repository), as
        users may have different settings for their Maven repositories (direct
        access to community repositories, proxies, enterprise repository with
        approved artifacts). Therefore, the setup of the repositories is left
        to the user of the application.</para>

        <para>In the most simple case, this example can be built out of the
        box if the settings.xml file for the local Maven installation enables
        the repositories from Maven Central and JBoss Releases. Instructions
        for setting up the latter can be found at:
        http://community.jboss.org/wiki/MavenGettingStarted-Users.</para>

        <para>The pom.xml can be modified to include references to other
        repositories, or equivalent artifact versions (if the build
        environment uses an enterprise-wide repository in which the artifacts
        have different version numbers).</para>
      </simplesect>
    </section>

    <section>
      <title>How to Build and Run Ticket Monster</title>

      <para>This document will provide a detailed account of the application
      and its use cases. However, often, it is easier to just run the
      application to answer your questions.</para>

      <itemizedlist>
        <listitem>
          <para>Building the application</para>
        </listitem>

        <listitem>
          <para>Preparing JBoss</para>
        </listitem>

        <listitem>
          <para>Deploying the application</para>
        </listitem>

        <listitem>
          <para>Starting the application server</para>
        </listitem>
      </itemizedlist>

      <para>Below, you will find instructions on how to perform each of these
      steps.</para>

      <section>
        <title>Building the Application</title>

        <para>In this step, we build the application. Since Ticket Monster
        uses Maven, so it can be built from the command line by simple
        running:</para>

        <informalexample>
          <programlisting>mvn clean package</programlisting>

          <para>This produces a WAR file, named TicketMonster.war, under
          TicketMonster/target. The application can then be deployed by moving
          this .war file to ${JBOSS_AS_7_HOME}/standalone/deployments and then
          executing the standalone.sh script, located in
          ${JBOSS_AS_7_HOME}/bin directory. The database will be initialized
          during this process by the SQL script, import.sql, included in the
          src/main/resources directory of the Ticket Monster project. Ticket
          Monster uses Spring 3.1.0.M2 and Spring Security 3.1.0.RC2.</para>
        </informalexample>
      </section>

      <section>
        <title>Preparing JBoss</title>

        <para>In addition to building the application, the JBoss Application
        Server must also be properly configured before deploying the
        application. Specifically, this involves creating a datasource
        definition within the configuration of the JBoss Application Server.
        In this guidebook, we describe two different alternative data source
        implementations - an in-memory database and a persistent database. To
        begin, we will show how to configure a persistent database, as it is
        aligned more closely with the Ticket Monster use cases. To configure a
        data source, we must edit the standalone.xml file, located in
        ${JBOSS_AS_7_HOME}/standalone/configuration.</para>

        <section>
          <title>Database Persistence</title>

          <para>One major issue with an in-memory database implementation is
          that the Ticket Monster application has the functionality to support
          most of its use cases, such as reserving tickets for multiple shows
          and finalizing those reservations. However, one disadvantage of the
          current application structure is that, whenever the application
          server is shut down, this information is lost, as Ticket Monster
          uses an in-memory database. A more realistic implementation of the
          Ticket Monster use cases would use a separate, persistent database,
          which stores information, such as previously made allocations, even
          when the application server is not running. The changes required to
          implement database persistence within Ticket Monster are very
          simple. First, we must modify our data source definition within the
          &lt;datasources&gt; element of standalone.xml, it should now
          be:<informalexample>
              <programlisting>&lt;datasource jndi-name="java:jboss/datasources/TicketMonsterDS" pool-name="TicketMonsterDS" enabled="true" jta="true" use-java-context="true" use-ccm="true"&gt;
    &lt;connection-url&gt;
        jdbc:hsqldb:hsql://localhost/ticketmonsterds
    &lt;/connection-url&gt;
    &lt;driver&gt;
        hsqldb
    &lt;/driver&gt;
    &lt;pool&gt;
        &lt;prefill&gt;
            false
        &lt;/prefill&gt;
        &lt;use-strict-min&gt;
            false
        &lt;/use-strict-min&gt;
        &lt;flush-strategy&gt;
            FailingConnectionOnly
        &lt;/flush-strategy&gt;
    &lt;/pool&gt;
    &lt;security&gt;
        &lt;user-name&gt;
            sa
        &lt;/user-name&gt;
        &lt;password&gt;
                            
        &lt;/password&gt;
    &lt;/security&gt;
    &lt;validation&gt;
        &lt;validate-on-match&gt;
            false
        &lt;/validate-on-match&gt;
        &lt;background-validation&gt;
            false
        &lt;/background-validation&gt;
        &lt;use-fast-fail&gt;
            false
        &lt;/use-fast-fail&gt;
    &lt;/validation&gt;
&lt;/datasource&gt;</programlisting>
            </informalexample></para>

          <para>This data source definition creates a data source, called
          TicketMonsterDS, that is independent of the application server and
          can be referenced than the application, as opposed to one that is
          created whenever the application server is started.</para>

          <para>To create and initialize our database, we must add a file,
          create-db.sql, which creates tables for each of Ticket Monster's
          entities, first dropping those tables if they already exist in the
          database. Then we add two scripts, server.sh and init-db.sh, the
          former to start the database and the latter to initialize it. Thus,
          we now execute './server.sh' to start the database, and
          './init-db.sh', which executes the SQL files create-db.sql and then
          import.sql, to initialize it. Once these steps have been performed,
          we can deploy the application with database persistence, i.e. even
          if we restart the application server, allocations will be maintained
          unless we execute the init-db.sh script again. The aforementioned
          SQL files, including import.sql (moved from src/main/resources), can
          be found in the 'db' sub-directory of the Ticket Monster
          project.</para>

          <para>It should be also mentioned that database persistence places
          some additional requirements on the business logic of the
          application. Specifically, Ticket Monster must bootstrap the cache.
          In other words, whenever a seat block is requested for a given show
          and row pair, the application must first retrieve all allocations
          for that row and show and place them in the cache, to avoid
          overlapping reservations. This is accomplished via the
          populateCache() method of the AllocationDao interface.</para>
        </section>

        <section>
          <title>In-Memory Database</title>

          <para>As well, we include instructions on how to set up an in-memory
          database. First, we must edit our data source definition for
          'TicketMonsterDS' so that it now reads:</para>

          <para><informalexample>
              <para><programlisting>&lt;datasource jndi-name="java:jboss/datasources/TicketMonsterDS" pool-name="TicketMonsterDS"
   enabled="true" jta="true" use-java-context="true" use-ccm="true"&gt;
   &lt;connection-url&gt;
      jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
   &lt;/connection-url&gt;
   &lt;driver&gt;
      h2
   &lt;/driver&gt;
   &lt;pool&gt;
      &lt;prefill&gt;
          false
      &lt;/prefill&gt;
      &lt;use-strict-min&gt;
          false
      &lt;/use-strict-min&gt;
      &lt;flush-strategy&gt;
          FailingConnectionOnly
      &lt;/flush-strategy&gt;
   &lt;/pool&gt;
   &lt;security&gt;
      &lt;user-name&gt;
          sa
      &lt;/user-name&gt;
      &lt;password&gt;
          sa
      &lt;/password&gt;
   &lt;/security&gt;
   &lt;validation&gt;
      &lt;validate-on-match&gt;
          false
      &lt;/validate-on-match&gt;
      &lt;background-validation&gt;
          false
      &lt;/background-validation&gt;
      &lt;useFastFail&gt;
          false
      &lt;/useFastFail&gt;
   &lt;/validation&gt;
&lt;/datasource&gt;</programlisting>This definition is necessary for the
              application to be create an in-memory database for the
              application, which can be retrieved via a JNDI look-up.</para>

              <para>Next, we must modify our persistence.xml file, located in
              src/main/resources/META-INF, adding one of the properties of our
              persistence unit, ticketmonsterPU. Specifically, we include the
              property '&lt;property name="hibernate.hbm2ddl.auto"
              value="create-drop"/&gt;'. This property causes the application
              server to drop the database schema whenever the SessionFactory
              is closed explicitly. Previously, this contradicted our
              persistent database implementation, as we wanted consistent data
              from session to session. However, with an in-memory database,
              the database is destroyed and re-created whenever the
              application server is restarted, so this property is
              desired.</para>
            </informalexample></para>
        </section>
      </section>

      <section>
        <title>Deploying the Application</title>

        <para>Copy the WAR file produced by the build to deploy folder of the
        JBoss Application Server.</para>

        <para>The WAR file is located in TicketMonster/target, and should be
        copied to ${JBOSS_AS_7_HOME}/standalone/deployments.</para>
      </section>

      <section>
        <title>Authenticated Access</title>

        <para>Accessing all views of the Ticket Monster web application
        requires the login information for users with the proper
        authorization. Specifically, the views related to booking tickets
        cannot be accessed by anyone but a User in the Ticket Monster
        database. Below are the three 'username, "password" ' pairs that come
        provided with the Ticket Monster application:<itemizedlist>
            <listitem>
              <para>rbradley, "ticketmonster"</para>
            </listitem>

            <listitem>
              <para>mbg, "marius"</para>
            </listitem>

            <listitem>
              <para>sbryzak, "original"</para>
            </listitem>
          </itemizedlist></para>
      </section>
    </section>

    <section>
      <title>Ticket Monster and JBoss Developer's Studio</title>

      <para>The easiest way to gain a deeper understanding of the Ticket
      Monster web application is to examine the source code directly. This
      guide will instruct you how to import the application into JBoss
      Developer's Studio (JBDS).</para>

      <para>Ticket Monster is a Maven-based application; thus, to navigate its
      structure in JBoss Developer's Studio, you must create an Eclipse
      project for it. This can be done using the Maven Eclipse
      plugin:<informalexample>
          <programlisting>mvn eclipse:eclipse -Dwtpversion=2.0</programlisting>

          <para>Alternatively, the m2e Maven Integration for Eclipse plugin
          can be used to import the project into JBoss Developer's
          Studio.</para>
        </informalexample></para>

      <simplesect>
        <title>Importing Ticket Monster into JBDS</title>

        <para>Ticket Monster is a Maven-based project, so you can import it
        into JBDS if you have the m2eclipse Maven integration plugin
        installed, including the m2eclipse WTP extension. Installation can be
        found at http://download.eclipse.org/technology/m2e/releases/.</para>

        <para>For importing the project, go to
        'Import...'-&gt;'Maven'-&gt;'Existing Maven Projects' and select the
        top directory of the Ticket Monster example. You will be shown the
        project's pom.xml file.</para>
      </simplesect>
    </section>
  </chapter>
